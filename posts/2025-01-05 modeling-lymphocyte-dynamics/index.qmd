---
title: "Modeling Lymphocyte Dynamics with Agent-Based Simulations and Non-Linear Equations"
description: |
  BLA BLA BLA.
date: "2024-12-14"
fig-format: svg
fig-width: 12
fig-responsive: true
fig-asp: .5
execute: 
  warning: false
  error: false
# doi: "10.59350/mgpv2-d5e33"
categories: [non-linear]
bibliography: ref.bib
title-block-banner: title-block.jpeg
image: body_1.jpeg
draft: true
# resources: 
#   - null
---

```{r}
#| include: false
library(ggplot2)
library(data.table)
library(nlme)
library(brms)

theme_set(new = theme_classic(base_size = 20))
```

<!-- 
### **1. Introduction: Why Simulate the Immune System?**

- Hook the reader with a relatable or intriguing question: Why do we need computers to understand the immune system?
- Briefly introduce the key players (T cells, antigens) and the biological drama they represent.
- Set the goal of the post: to use R to build a simulation of T lymphocyte activation, proliferation, and death.
- Highlight the value of computational models for exploring complex, nonlinear biological phenomena.
-->

# Introduction  

#### Why Simulate the Immune System? 

Imagine this: your body is a bustling metropolis, teeming with life and activity, but also constantly under siege. Every day, an invisible army of pathogens tries to infiltrate your system, but lurking in your bloodstream are specialized cells (T lymphocytes) ready to mobilize at a moment's notice. They're like your body's elite security force: alert, adaptable, and capable of going from zero to full-on war mode in a matter of hours. But how do these cells know when to act? How do they decide how many reinforcements to call in? And what prevents them from going rogue and creating chaos?  

If you've ever wanted to get under the hood of the immune system and see how it ticks, computational modeling can be your best friend. By using a few well-chosen rules, we can simulate the dance of activation, proliferation, and apoptosis (a fancy word for programmed cell death) that governs the life cycle of T cells. Why is this important? Because understanding how immune cells behave isn't just a nerdy hobby, it's key to face real world challenges like autoimmune diseases, cancer, and pandemics.  

In this post, we'll take a deep dive into building a simulation of T cell dynamics using R. We'll see how these microscopic guardians respond to antigen threats, multiply like crazy, and then gracefully bow out when the job is done. Along the way, we'll uncover how even simple models can capture the beauty (and messiness) of biological systems.  

So grab your R console, dust off your biology knowledge, and let's see how to bring these tiny warriors to life in code. And if you're thinking, "But wait, can a computer really capture something as complex as the immune system?", don't worry. We're not trying to replicate every molecular detail. Instead, we'll focus on the core principles that make T cells such fascinating and effective defenders. Let's get started.

<!-- 
### **2. Biological Framework: Understanding the Rules of the Game**  

- Provide a concise but vivid description of the biological processes being modeled:  
  - **Activation:** How T cells wake up in response to antigens.  
  - **Proliferation:** How they multiply to mount a defense.  
  - **Apoptosis:** How they eventually die off to maintain balance.  
- Explain why these processes are well-suited to computational modeling.  
-->

# From Cells to Code: Defining the Rules of Engagement

Before we dive into the code, let's talk about the stars of our simulation: T lymphocytes. These are your immune system's rockstars, always ready to jump into action. But not all T cells are created equal, and for simplicity, we're focusing on just two main players:  

1. **Naive T cells**: Think of these as the rookies, new recruits hanging around in the lymph nodes, waiting for a signal that trouble is brewing. They haven't encountered their target (an antigen) yet, so they're basically on standby.  
2. **Activated T cells**: Once a naive T cell encounters its specific antigen, it gets activated and transforms into a battle-hardened warrior. These are the immune system's front-line fighters, proliferating and going after invaders with precision.  

Finally, there's the antigen itself, the instigator of all this cellular drama. An antigen is any molecule that triggers an immune response, like a fragment of a virus or a bacterial protein. For this simulation, we'll treat the antigen as a static entity that kicks off the action.  

#### A Simplified World

Real immune systems are *messy*. There are antigen-presenting cells, cytokines, feedback loops, and more. But here, we're simplifying the process. No cytokine storms, no T regulatory cells, just the core dynamics of activation, proliferation, and death.  

Why simplify? Because models are like maps. A map of your city doesn't show every streetlight or coffee shop, it shows just enough to get you where you're going. Our simulation aims to capture the *essence* of T cell dynamics, not recreate every molecular detail.  

#### The Rules  

In our simulation, T cells follow three main rules:  

1. **Activation**: Naive T cells become activated when they encounter an antigen. But it's not a simple "on/off" switch, it's more like a dimmer. The probability of activation depends on antigen concentration and follows a nonlinear curve called the Hill function.  
2. **Proliferation**: Activated T cells multiply to create an army of clones. This growth isn't endless, it's governed by logistic growth, which slows down as the population approaches the carrying capacity of the environment.  
3. **Apoptosis**: All good things must come to an end. Activated T cells eventually undergo apoptosis, or programmed cell death, to prevent the immune response from spiraling out of control.  

#### Nonlinearity: The Secret Sauce

Here's where things get spicy. Biological systems are rarely linear. Small changes in input can lead to huge changes in output, and that's exactly what we see with T cell activation. Enter the Hill function, our mathematical hero:  

$$
P(\text{Activation}) = \frac{\text{Antigen}^n}{K^n + \text{Antigen}^n}
$$  

This equation says: the more antigen there is, the higher the probability of activation. But thanks to the Hill coefficient ($n$), this isn't a gradual ramp-up, it's a sharp curve. Once antigen levels hit a critical threshold, the system goes from "meh" to "let's fight!" almost instantly. It's like flipping a switch, but with extra flair.  

We'll also see nonlinearity in proliferation. Early on, growth is exponential (cells divide), and their clones divide, and soon you have an army. But as resources get tight, growth slows down, creating an S-shaped curve. This logistic growth is a hallmark of populations that live in resource-limited environments.  

#### Stochasticity: Keeping It Real

Biological systems are noisy. Cells don't always behave predictably, sometimes they activate when they shouldn't, or fail to divide even when conditions are perfect. To capture this randomness, we'll sprinkle a bit of stochasticity (a fancy word for randomness) into our simulation.  

So, our simulation boils down to this:  

1. Naive T cells encounter antigen and get activated based on a probability curve.  
2. Activated T cells proliferate, governed by logistic growth.  
3. Some T cells die off each step, keeping the population in check.  

With these rules in place, we can move on to building the actual simulation. Next up: turning these principles into code and seeing how our T cell population evolves over time.

<!-- 
### **3. Modeling Philosophy: Translating Biology Into Code**  

- Introduce the concept of agent-based modeling. Emphasize that each T cell is an agent governed by simple rules that lead to emergent complexity.  
- Briefly describe the algorithmic flow:  
  1. Start with initial populations of naive and activated T cells.  
  2. Simulate activation using a probabilistic Hill function.  
  3. Simulate proliferation with logistic growth to reflect resource limitations.  
  4. Simulate apoptosis with random events based on a constant probability.  
- Connect this approach to real-world biological dynamics.  
-->

<!-- 
### **4. The Simulation: From R Code to Results**  

#### **4.1. Setting Up the Environment**  
- Define the parameters (e.g., antigen levels, proliferation rates).  
- Show how to initialize the simulation in R.  

#### **4.2. Activation Dynamics**  
- Present the Hill function and its R implementation.  
- Walk through how naive T cells are activated probabilistically at each time step.  

#### **4.3. Proliferation and Saturation**  
- Explain logistic growth as a balance between rapid expansion and resource limits.  
- Show the R code for modeling proliferation.  

#### **4.4. Apoptosis: The Cleanup Crew**  
- Explain how apoptosis prevents overpopulation of activated T cells.  
- Present the R code for modeling random cell death.  

#### **4.5. Bringing It All Together**  
- Combine activation, proliferation, and apoptosis into a single simulation loop.  
- Share the complete R code with comments for clarity.  
-->

<!--
### **5. Results: What the Simulation Teaches Us**  
- Visualize the outputs (e.g., a time series plot of T cell populations).  
- Highlight the key insights:  
  - The S-shaped growth of activated T cells.  
  - How varying parameters (e.g., antigen levels or apoptosis rates) affects the immune response.  
  - The interplay of activation, proliferation, and apoptosis in shaping the dynamics.  
-->

<!-- 
### **6. Discussion and Next Steps: Exploring the Immune Frontier**  
- Reflect on what the model achieves:  
  - Captures essential dynamics of T cell behavior.  
  - Demonstrates the power of computational biology.  
- Discuss limitations:  
  - Oversimplification of immune processes.  
  - Exclusion of feedback mechanisms or other cell types.  
- Suggest extensions or applications:  
  - Adding B cells or cytokine signaling.  
  - Using the model to study immune responses in diseases like COVID-19 or cancer.  
-->

<!-- 
### **7. Conclusion: The Beauty of Simplicity in Complexity**  
- Reinforce the main idea: Simple rules (activation, proliferation, apoptosis) can model complex biological systems.  
- Encourage readers to experiment with the code and parameters to explore immune dynamics further.  
- End with an inspiring note about the importance of computational approaches in understanding biology.
-->

<!-- HASTA AQUI -->

<!--
# Building a Lymphocyte Simulation in R: From Code to Cellular Chaos

Delve into the dynamic world of T lymphocyte modeling in R. Forget the lab coat (you won't need it here). This journey is less about pipettes and more about probability distributions and growth equations. Let's get hands-on with a simplified yet illuminating agent-based simulation.

#### Model Overview: Who's on the Field?

We're focusing on T lymphocytes, the immune system's tactical units. Meet the players:

1. **Naive T cells**: Fresh recruits, biding their time for activation.
2. **Activated T cells**: The seasoned combatants, ready to multiply and fight.

The antigen, a molecular villain, will serve as the trigger for activation. While we omit some complexities (like antigen-presenting cells), we'll include their functional impact on activation.

#### Activation Dynamics: The Hill Function's Charm

The activation of naive T cells follows a probabilistic rule, dictated by the Hill function:

$$
P(\text{Activation}) = \frac{\text{Antigen}^n}{K^n + \text{Antigen}^n}
$$

Where:

- \(P(\text{Activation})\): Activation probability.
- \(\text{Antigen}\): Antigen concentration.
- \(n\): Hill coefficient (response steepness).
- \(K\): Dissociation constant (50% activation concentration).

This equation encapsulates the non-linear, cooperative behavior of T cell receptors. The Hill coefficient, \(n\), transforms the probability curve from gradual (low \(n\)) to switch-like (high \(n\)).

**R Implementation:**

```{r}
activation_probability <- function(antigen, K, n) {
  (antigen^n) / (K^n + antigen^n)
}
```

**Visualization:**

```{r}
#| eval: false
antigen_conc <- seq(0, 3, by = 0.01)
probs <- lapply(c(1, 2, 4), function(n) 
  activation_probability(antigen_conc, K = 0.5, n = n)
)

df_probs <- data.frame(Antigen = antigen_conc, `n=1` = probs[[1]], `n=2` = probs[[2]], `n=4` = probs[[3]])
df_probs <- pivot_longer(df_probs, -Antigen, names_to = "Hill")

ggplot(df_probs, aes(x = Antigen, y = value, color = Hill)) +
  geom_line(size = 1) +
  labs(x = "Antigen Concentration", y = "Activation Probability", title = "Hill Function Dynamics")
```

#### **Proliferation: Exponential Growth, Meet Logistic Reality**

Activated T cells proliferate, but growth isn't boundless. The logistic growth equation captures this constraint:

$$
\frac{dN}{dt} = rN \cdot \frac{1 - N}{K}
$$

Where:

- \(N\): T cell population.
- \(r\): Growth rate.
- \(K\): Carrying capacity.

For discrete time steps:

$$
N(t+1) = N(t) + r \cdot N(t) \cdot \frac{1 - N(t)}{K}
$$

**R Implementation:**

```{r}
proliferation <- function(N, r, K) {
  N + r * N * (1 - N / K)
}
```

#### **Apoptosis: The Silent Exit**

T cells also die, a process modeled with a constant probability per time step:

$$
P(\text{Apoptosis}) = p_{\text{Apoptosis}}
$$

**R Implementation:**

```{r}
apoptosis <- function(N, p_apoptosis) {
  n_apoptosis <- rbinom(1, N, p_apoptosis)
  N - n_apoptosis
}
```

#### **Early Activation: Lighting the Fuse**

Simulate the activation of naive T cells using stochastic probability:

```{r}
#| eval: false
n_steps <- 100
naive_t_cells <- rep(300, n_steps)
activated_t_cells <- numeric(n_steps)
antigen_level <- 0.3
K_activation <- 0.8
n_hill <- 3

prob <- activation_probability(antigen_level, K_activation, n_hill)

for (t in 2:n_steps) {
  n_activated <- sum(runif(naive_t_cells[t - 1]) < prob)
  naive_t_cells[t] <- naive_t_cells[t - 1] - n_activated
  activated_t_cells[t] <- activated_t_cells[t - 1] + n_activated
}

df_early <- data.frame(Time = 1:n_steps, Naive = naive_t_cells, Activated = activated_t_cells)
df_early <- pivot_longer(df_early, -Time, names_to = "Cell Type")

ggplot(df_early, aes(x = Time, y = value, color = `Cell Type`)) +
  geom_line(size = 1) +
  labs(title = "Early Activation Dynamics")
```

#### **Putting It All Together**

Combine activation, proliferation, and apoptosis into a complete simulation:

```{r}
#| eval: false
for (t in 2:n_steps) {
  n_activated <- sum(runif(naive_t_cells[t - 1]) < prob)
  naive_t_cells[t] <- naive_t_cells[t - 1] - n_activated
  
  proliferated <- proliferation(activated_t_cells[t - 1] + n_activated, r = 0.1, K = 500)
  activated_t_cells[t] <- apoptosis(round(proliferated), p_apoptosis = 0.05)
}

df_full <- data.frame(Time = 1:n_steps, Naive = naive_t_cells, Activated = activated_t_cells)
df_full <- pivot_longer(df_full, -Time, names_to = "Cell Type")

ggplot(df_full, aes(x = Time, y = value, color = `Cell Type`)) +
  geom_line(size = 1) +
  labs(title = "Full T Cell Dynamics")
```

This simulation blends non-linear equations and stochasticity to capture the nuanced behavior of T cells. Experiment with parameters (e.g., antigen level, proliferation rate) to see how they influence the immune response. Through modeling, we translate cellular chaos into comprehensible dynamics, because sometimes, the immune system makes sense after all!

# From Digital Cells to Biological Insights

Now that we've built our digital immune system and watched our simulated lymphocytes in action, let's take a step back and discuss what it all means.

### Biological Interpretation and Relevance: Connecting the Dots

Our simplified model, while abstract, captures some fundamental aspects of lymphocyte dynamics. The Hill function for activation demonstrates the importance of cooperative binding and threshold responses in triggering an immune response. The logistic growth equation shows how limited resources constrain lymphocyte proliferation, preventing uncontrolled expansion. The addition of stochasticity reminds us that biological systems are inherently noisy and that even with identical starting conditions, outcomes can vary.

For example, consider the impact of varying the antigen level. In our simulation, a higher antigen concentration leads to a faster and stronger activation of T cells, which then drives a larger proliferative response (up to the carrying capacity). This aligns with our understanding of real immune responses: a higher pathogen load typically leads to a more robust immune response. Similarly, the Hill coefficient (`n`) plays a crucial role. A higher Hill coefficient implies a more sensitive response to changes in antigen concentration, meaning a small increase in antigen can cause a much larger increase in T cell activation.

Relating this back to the initial problem of cancer immunotherapy, our model suggests that the effectiveness of checkpoint blockade therapies might depend not only on the number of T cells present in the tumor but also on factors like the local antigen concentration and the sensitivity of T cells to that antigen (represented by the Hill coefficient).

### Model Limitations and Simplifications: Recognizing the Caveats

It's important to acknowledge the limitations of our simplified model. We've made several assumptions and simplifications:

-   **Simplified cell types:** We only considered two types of T cells (naive and activated) and didn't include other important immune cells like B cells, dendritic cells, or regulatory T cells.
-   **No spatial dynamics:** Our model doesn't account for the spatial organization of the immune system or the movement of cells within tissues.
-   **Simplified interactions:** We've modeled only a few key processes (activation, proliferation, apoptosis) and haven't included other important interactions like cytokine signaling or cell-cell contact.
-   **Constant parameters:** In reality, parameters like the growth rate or apoptosis probability can change over time in response to various factors.

These simplifications are necessary to make the model manageable for a blog post, but they also mean that our model doesn't capture the full complexity of the real immune system.

### Sensitivity Analysis and Model Validation: Testing the Robustness

A crucial step in any modeling study is sensitivity analysis, where we assess how the model outputs change in response to changes in the input parameters. For example, we could vary the Hill coefficient or the carrying capacity and observe how these changes affect the dynamics of the lymphocyte populations. This helps us understand which parameters have the greatest influence on the model's behavior.

Another important aspect is model validation, where we compare the model's predictions to real-world data. While a full validation is beyond the scope of this post, we can mention that experimental data from *in vitro* or *in vivo* studies could be used to calibrate the model parameters and assess its predictive accuracy.

For instance, we can show a quick example of sensitivity analysis by varying the carrying capacity:

```{r}
#| eval: false
# Sensitivity analysis for carrying capacity
carrying_capacities <- seq(from = 200, 800, by = 100)
results <- list()

## T-Cell activation probability (same as before)
prob <- activation_probability(antigen_level, K_activation, n_hill)

for (K in carrying_capacities) {
    naive_t_cells <- numeric(n_steps)
    activated_t_cells <- numeric(n_steps)

    naive_t_cells[1] <- n_naive
    activated_t_cells[1] <- 0

    for (t in 2:n_steps) {
      ## Restart the number of activated T cells
      n_activated <- 0
      ## Stochastic activation based on activation probability
      n_activated <- sum(runif(n = naive_t_cells[t-1]) < prob)
      
      naive_t_cells[t] <- naive_t_cells[t-1] - n_activated
      
      activated_t_cells_new <- proliferation(
        N = activated_t_cells[t-1] + n_activated, 
        r = r_proliferation, 
        K = K
      )
      
      activated_t_cells[t] <- apoptosis(
        N = round(activated_t_cells_new), 
        p_apoptosis = p_apoptosis
      )
    }
    
    results[[as.character(K)]] <- data.table(
      Time = 1:n_steps, 
      Activated = activated_t_cells
    )
}

results_df <- rbindlist(results, idcol = "K")

ggplot(results_df, aes(x = Time, y = Activated, color = ordered(K))) +
  geom_line(linewidth = 1) +
  geom_hline(yintercept = 0, linetype = 2, linewidth = 1/2, color = "gray") +
  labs(title = "Sensitivity Analysis for Carrying Capacity", x = "Time Steps", y = "Number of Activated Cells", color = "Carrying Capacity")
```

This will show how the peak of the activated T cell population changes depending on the carrying capacity.

# Parameter Estimation: Learning from Data

#### The Need for Parameter Estimation

Our lymphocyte model has several parameters that govern its behavior, such as the proliferation rate (`r`), the carrying capacity (`K`), and the activation threshold (`K_activation`). These parameters determine the quantitative aspects of the simulated dynamics. However, without connecting our model to real-world data, these parameters are just theoretical values. Parameter estimation allows us to find values for these parameters that best match observed data, making our model more realistic and predictive.

#### A Simple Example: Estimating the Proliferation Rate

For this example, we will focus on estimating the proliferation rate (`r`). This simplification allows us to demonstrate the core concepts of Bayesian parameter estimation without getting bogged down in overly complex models.

1. **Simulate Data**: We'll generate synthetic data from our model using a known value for r. This will serve as our "observed" data. We'll also add some noise to make it more realistic.

2. **Define Prior**: We'll choose a prior distribution for `r`. Since `r` represents a rate, it must be positive. A suitable choice is an exponential distribution or a half-normal distribution.

3. **Define Likelihood (implicitly through the model)**: In Bayesian models, we define the likelihood implicitly by specifying the model structure. We'll assume that the number of activated T cells at each time step follows a Poisson distribution, where the mean is determined by our proliferation model.
4. **Perform Bayesian Inference with `brms`**: The `brms` package uses Stan, a powerful probabilistic programming language, to perform MCMC sampling from the posterior distribution.
5. **Analyze the Posterior**: We'll examine the posterior distribution to obtain estimates of `r` and quantify our uncertainty.

#### R Code Example using `brms`

```{r}
#| eval: false
# Simulate data


true_r <- 0.25 ## True rate parameter
K <- 300
n_steps <- 100
activated_t_cells_sim <- numeric(n_steps)
activated_t_cells_sim[1] <- 10

set.seed(1234) ## Seed for reproducibility

for (t in 2:n_steps) {
  activated_t_cells_sim[t] <- proliferation(
    N = activated_t_cells_sim[t-1], 
    r = true_r, 
    K = K
  ) + rnorm(1,0,5)
}

data <- data.frame(Time = 1:n_steps, Count = round(activated_t_cells_sim))
data$Count_lag <- c(0, data$Count[-nrow(data)]) # Create lagged variable

# Define the model formula
model_formula <- bf(Count ~ Count_lag + r * Count_lag * (1 - Count_lag / K),
                    r + K ~ 1, # Non-linear parameters
                    nl = TRUE # Non-linear model
)

# Fit the model
fit <- brm(
  formula = model_formula, data = data, 
  iter = 2000, warmup = 1000, chains = 4, cores = 4,
  control = list(adapt_delta = .99, max_treedepth = 30),
  prior = 
    prior(normal(0.8, 0.1), nlpar = "r", lb = 0) + 
    prior(constant(300), nlpar = "K"),
  family = poisson(),
  seed = 1234,
  file = "model.RDS"
)

# Analyze the posterior
summary(fit)
plot(fit)
pp_check(fit) # Posterior predictive checks
posterior_samples <- posterior_samples(fit)
hist(posterior_samples$r, main = "Posterior Distribution of r", xlab = "r")
abline(v = true_r, col = "red", lwd = 2) # True value in red
quantile(posterior_samples$r, probs = c(0.025, 0.975))
```


# Future Directions and Broader Implications: The Bigger Picture

Our simplified model provides a foundation for more complex and realistic simulations. Future directions could include:

-   **Adding more cell types**: Incorporating B cells, dendritic cells, and other immune cells would allow us to model more complex interactions and immune responses.
-   **Including spatial dynamics**: Modeling the movement of cells within tissues would add another layer of realism.
-   **Modeling cytokine networks**: Cytokines are signaling molecules that play a crucial role in regulating immune responses. Including them in the model would allow us to simulate more complex feedback loops and interactions.
-   **Connecting to control theory and dynamical systems**: Concepts like feedback loops, stability analysis, and bifurcations from these fields can provide valuable insights into the behavior of our model and the real immune system.

These more complex models could be used to address a wide range of immunological questions, from predicting vaccine efficacy to designing personalized immunotherapies.

# Final Remarks

In this post, we've explored how agent-based modeling and non-linear equations can be combined in R to simulate the complex dynamics of lymphocyte populations. We've built a simplified model that captures key processes like activation, proliferation, and apoptosis, and we've seen how these processes interact to shape the overall immune response. 

While our model is a simplification of reality, it provides a valuable framework for understanding the fundamental principles of lymphocyte dynamics and demonstrates the power of computational modeling in immunology. By building these digital models, we can gain insights that would be difficult or impossible to obtain through traditional experimental methods alone, paving the way for more effective treatments and interventions for a wide range of diseases.
-->

