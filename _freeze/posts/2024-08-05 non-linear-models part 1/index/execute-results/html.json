{
  "hash": "8ebd0ecd4e50350bdace35d5bec498f7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Non-linear models: Pharmacokinetics and Indomethacin\"\ndescription: |\n  Here we dive in the process of making a non-linear model to predict the decay of plasma levels of an anti-inflammatory drug, and compare frequentist and bayesian methods.\ndate: \"2024-08-20\"\n\ndoi: \"10.59350/r62fn-8h720\"\n\ncategories: [non-linear, educational, inference]\n\nbibliography: ref.bib\n\ntitle-block-banner: title-block.jpeg\nimage: body_1.webp\n---\n\n\n\n\n\n# Introduction\n\nLet's be honest, being a statistician or a scientist **isn't just about crunching numbers all day**. It's more like being a detective, a problem solver, and yeah, throwing in some math for good measure. When we get into **non-linear models**, things really start to get interesting. We're not just drawing straight lines anymore; we're wrestling with curves, untangling complicated relationships, and trying to figure out **what's really going on behind the scenes**.\n\nTake pharmacokinetics, for example. Sounds fancy, right? But at the core, it's just about what happens to a drug inside the body, and for us, that's where the real statistical fun begins. Predicting how a **drug's concentration changes** in the bloodstream over time isn't just about plotting some points and calling it a day. It's about **understanding how the data dances with biology**, and then figuring out the best way to describe that dance. And let's not forget the little thrill of choosing your weapon: Frequentist or Bayesian? It's like deciding between coffee or mate (and let's be real, I'm down for both). Each one has its perks, but the choice depends on the situation, and maybe how you're feeling that day.\n\nIn this post, we're going to roll up our sleeves and dig into **building a non-linear model** to predict how something, let's say, a drug disappears from the bloodstream. But we're not stopping there. Nope, we're also going to throw in a showdown between two big players: the frequentist and Bayesian methods. Think of it like a friendly face-off between two old rivals, each with its own style, strengths, and die-hard fans.\n\nBut here's the thing: this **isn't just about which method wins on paper**. It's about the real-life, day-to-day grind of working with data. It's about those moments when you're staring at your screen, trying to make sense of a stubborn parameter that just won't cooperate. It's about knowing when to trust the numbers and when to rely on your gut, your experience, and maybe even a bit of luck.\n\nSo whether you're a seasoned pro who's been around the block or someone just dipping their toes into the world of applied stats, this post is for you. We're going to dive in, compare, and yeah, maybe even have a little fun along the way. Because in the world of science and stats, the journey is half the adventure.\n\n# A drug example\n\nTraditionally, when using frequentist tools for inference, we often focus on estimating a single effect of interest. For example, let's consider **estimating the plasma concentrations** of the anti-inflammatory drug indomethacin **over several hours**. We observe the following behavior\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(Indometh)\nggplot(Indometh, aes(time, conc, col = Subject)) +\n  labs(y = \"Plasma levels (mcg/ml)\", x = \"Time (hours)\") +\n  geom_point(cex = 3) +\n  geom_smooth(se = FALSE, linewidth = 1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.svg)\n:::\n:::\n\n\n\nEven though this is clearly a non-linear problem, just for the sake of learning and illustrating how would it look, we'll fit a **simple linear model** to the data. For this, even though is a simple linear model, we still need to specify the model we are fitting **to understand what the model is implying** about the relationship:\n\n$$\n\\begin{aligned}\ny_i &\\sim \\mathcal{N}(\\mu_i, \\sigma) \\\\\n\\mu_i &= \\beta_0 + \\beta_1 \\cdot time_i\n\\end{aligned}\n$$\n\nThis is a the standard linear model, in which we are assuming that for each observation $i$, indomethacin plasma levels $y_i$ comes from a normal distribution with mean $\\mu_i$, and standard deviation $\\sigma$. Additionally, the intercept $\\beta_0$ indicates the plasma levels when time is zero. The $\\beta_1$ coefficient indicates the slope at which the pass of time changes the plasma levels in indomethacin, **assuming the change is linear and constant through time** (which by the previous plot, we can assure is not linear). \n\nAll models can replicate in some approximate manner the data generation process by which we observe many phenomena in real world scenarios. This is a good thing about writing down your models in equations; it becomes clear **what the data generation process is**, whether is correct or not.\n\nIn addition, we need to be very thoughtful about the not-so-obvious implications of a model when trying to force the data to fit the model. That's why we should always think to **fit our models to the data and not the data to the models**. But, of course, that is harder given that it require of us to think harder about the problems we are intending to solve, instead to only reporting significant results in order to publish.\n\nOne thing that you might noted from the previous model notation, is that we have a $\\mu$ for each observation but only one $\\sigma$ for the whole $y_i$. This implies that the dispersion must be equal for all expected plasma levels $\\mu_i$, which it could be more or less realistic depending of type the problem you are working with.\n\nLet's look to the fit of the linear model:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm_freq <- lm(conc ~ 1 + time, data = Indometh)\n\nsummary(lm_freq)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = conc ~ 1 + time, data = Indometh)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-0.5902 -0.2787 -0.1014  0.1579  1.6474 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  1.11820    0.08542  13.090  < 2e-16 ***\ntime        -0.18237    0.02258  -8.077 2.36e-11 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.4486 on 64 degrees of freedom\nMultiple R-squared:  0.5048,\tAdjusted R-squared:  0.497 \nF-statistic: 65.23 on 1 and 64 DF,  p-value: 2.361e-11\n```\n\n\n:::\n:::\n\n\n\nThis linear model is telling us that the baseline plasma levels of indomethacin at time 0 ($\\beta_0$) is 1.12 mcg/ml, which not seems very realistic, specially given that initially, most of the subjects had from 1.6 to 2.4 mcg/ml. The slope for time ($\\beta_1$) indicates that for every additional hour, there is a linear decrease in 0.18 mcg/ml in plasma levels of the drug. Let's see how it looks when we try to fit the model to the original data:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm_predict <- do.call(cbind, predict(lm_freq, se.fit = TRUE,))\n\nggplot(cbind(Indometh, lm_predict), aes(time, conc)) +\n  facet_wrap(~ Subject) +\n  labs(y = \"Plasma levels (mcg/ml)\", x = \"Time (hours)\") +\n  geom_point(aes(col = Subject), cex = 3) +\n  geom_line(aes(y = fit, col = Subject), linewidth = 1) +\n  geom_ribbon(aes(ymin = fit + se.fit * qnorm(0.025), \n                  ymax = fit + se.fit * qnorm(0.975), \n                  fill = Subject), alpha = .3)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.svg)\n:::\n:::\n\n\n\nClearly, our linear model is not doing a good job capturing the non-linear nature of our data (as expected). Up next, we'll try some non-linear modeling using a more thoughtful approach.\n\n## Designing a solution\n\nIt appears that the concentration of indomethacin decreases according to an **exponential function** of time. We can model this relationship with:\n\n$$\n\\begin{aligned}\ny_i &\\sim \\mathcal{N}(\\mu_i, \\sigma) \\\\\n\\mu_i &= \\alpha + \\beta \\cdot \\exp(\\lambda \\cdot time_i)\n\\end{aligned}\n$$\n\nIn this model, $\\lambda$ represents the rate of decay in the plasma concentration of indomethacin ($y_i$), starting from a baseline concentration ($\\beta$). The term $\\alpha$ estimates the minimum plasma concentration level over the observed time frame. We assume that the variance is constant across expected indomethacin plasma concentrations ($\\mu$) for each subject ($i$).\n\nHowever, given that we have repeated measurements from multiple individuals, we need to account for variability in the initial plasma concentrations across subjects. To address this, we introduce a random effect ($\\phi_i$) into the model:\n\n$$\n\\begin{aligned}\n\\mu_i &= \\alpha + (\\beta + \\phi_i) \\cdot \\exp(\\lambda \\cdot time_i)\n\\end{aligned}\n$$\n\nHere, $\\phi_i$ represents the deviation from the baseline plasma level ($\\beta$) for subject $i$. We keep $\\lambda$ and $\\alpha$ fixed because we're interested in estimating population parameters to describe the pharmacokinetics of the drug.\n\n## `nlme` approach\n\nLet's dive into fitting a non-linear model using the `nlme` R package, which allows us to specify custom model forms:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnlm_freq <- nlme::nlme(\n  ## Model previously described\n  model = conc ~ alpha + (beta + phi) * exp(lambda * time),\n  data = Indometh,\n  ## Fixed effects\n  fixed = alpha + beta + lambda ~ 1,\n  ## Random effects\n  random = phi ~ 1 | Subject, \n  ## Starting proposal values\n  start = list(fixed = c(0, 2, -1)))\n\n## Confidence intervals for fixed effects\nnlme::intervals(nlm_freq, which = \"fixed\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nApproximate 95% confidence intervals\n\n Fixed effects:\n             lower       est.      upper\nalpha   0.09050133  0.1311638  0.1718262\nbeta    2.36887258  2.8249635  3.2810543\nlambda -1.77509197 -1.6140483 -1.4530047\n```\n\n\n:::\n:::\n\n\n\nLet's kick things off by looking at where we stand with indomethacin's plasma levels. At time zero, we're seeing baseline concentrations hovering around 2.74 mcg/ml. Not too shabby, right? But this little molecule doesn't stick around for long, our decay rate clocks in at about $\\exp(-1.61) \\approx 0.20$, which translates to a swift 80% drop in those levels each hour. Eventually, the levels bottom out at around 0.13 mcg/ml, where the decline takes a bit of a breather.\n\nNow, if you were paying close attention to the code, you might have noticed something interesting: when we're playing in the frequentist sandbox, particularly with non-linear models, **we've got to give the algorithm a little nudge with some starting values**. It's like setting up the board for a game, these initial values are where the algorithm begins its quest through the likelihood landscape, hunting down the most likely parameters that explain our data. Remember that [previous post about Hamiltonian Monte Carlo?](https://doi.org/10.59350/fa26y-xa178) Well, this is a bit like rolling a ball down a hill of parameter space, **but here we're aiming to land on the single spot** that maximizes our chances of observing the data we have.\n\nBut enough with the theory, let's dive back into our non-linear model and see how these predicted plasma levels measure up against the real-world data we've got in hand:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfreq_pred <- predict(nlm_freq)\n\nggplot(cbind(Indometh, pred = freq_pred), aes(time, conc)) +\n  facet_wrap(~ Subject) +\n  labs(y = \"Plasma levels (mcg/ml)\", x = \"Time (hours)\") +\n  geom_point(aes(col = Subject), cex = 3) +\n  geom_line(aes(y = pred, col = Subject), linewidth = 1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.svg)\n:::\n:::\n\n\n\nOur model does a decent job fitting the observed data. But what's the story beyond standard errors? How do we quantify uncertainty in our model parameters? What's the likelihood of observing a specific decay rate or baseline level? With frequentist methods, our insights are somewhat limited to point estimates and standard errors. We need a broader view.\n\n## `brms` approach\n\nTo harness the power of the Bayesian framework, we need to not only define our model but also incorporate prior beliefs about the parameters. Let's revisit our parameters:\n\n- $\\alpha$: Minimum plasma levels of the drug.\n- $\\beta$: Baseline plasma levels at time zero.\n- $\\phi$: Subject-specific deviation from the population $\\beta$.\n- $\\lambda$: The amount of exponential decay.\n\nWe'll assign prior distributions based on prior knowledge and results from our frequentist model. Here's the prior setup:\n\n- For $\\alpha$, we'll use a normal distribution centered around 0.1 mcg/ml with a standard deviation of 0.5 mcg/ml. We'll truncate this prior at zero, since negative plasma levels aren't physically meaningful.\n- For $\\beta$, we'll specify a normal distribution centered around 2.5 mcg/ml with a standard deviation of 3 mcg/ml to avoid overly restricting the parameter space. We'll also set a lower bound of zero.\n- For $\\phi$, we'll use a normal prior centered on 0.5 mcg/ml with a moderate standard deviation of 2 mcg/ml to capture variability around baseline levels.\n- For $\\lambda$, we'll set a weakly informative prior centered around -1 with a standard deviation of 3. This reflects our expectation of a negative decay rate, with the upper bound fixed at zero to prevent increases in plasma levels.\n\nThe priors for our model parameters are:\n\n$$\n\\begin{aligned}\n\\alpha &\\sim \\mathcal{N}(0.1, 0.5) \\\\\n\\beta &\\sim \\mathcal{N}(2.5, 3.0) \\\\\n\\phi &\\sim \\mathcal{N}(0.5, 2.0) \\\\\n\\lambda &\\sim \\mathcal{N}(-1.0, 3.0) \\\\\n\\end{aligned}\n$$\n\nSo now that we have what we need we can already proceed to fit our bayesian non-linear model:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnlme_brms <- brm(\n  ## Formula\n  formula = bf(conc ~ alpha + (beta + phi) * exp(lambda * time),\n               alpha + beta + lambda ~ 1, phi ~ 1 | Subject,\n               nl = TRUE),\n  data = Indometh,\n  ## Priors\n  prior = prior(normal(0.1, 0.5), nlpar = \"alpha\", lb = 0) +\n    prior(normal(2.5, 3.0), nlpar = \"beta\", lb = 0) +\n    prior(normal(0.5, 2.0), nlpar = \"phi\") +\n    prior(normal(-1.0, 3.0), nlpar = \"lambda\", ub = 0),\n  ## MCMC hyperparameters\n  chains = 5, iter = 4000, \n  warmup = 2000, cores = 5,\n  ## More flexible exploration parameters\n  control = list(adapt_delta = 0.99, \n                 max_treedepth = 50),\n  ## For reproducibility\n  seed = 1234, file = \"nlme_brms.RDS\"\n)\n\nfixef(nlme_brms)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                   Estimate  Est.Error        Q2.5      Q97.5\nalpha_Intercept   0.1346163 0.02173654  0.09162845  0.1768141\nbeta_Intercept    2.6519527 1.44843180  0.24992601  5.7345653\nlambda_Intercept -1.6448947 0.09467393 -1.83556844 -1.4659436\nphi_Intercept     0.2150963 1.44471628 -2.84981889  2.6512578\n```\n\n\n:::\n:::\n\n\n\nIn this Bayesian model, we get not just point estimates but full distributions for each parameter. This approach allows us to explore the probable range of parameter values and answer probabilistic questions. But first, let's see how well our Bayesian model fits the observed data:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbmrs_pred <- predict(nlme_brms)\n\nggplot(cbind(Indometh, bmrs_pred), aes(time, conc)) +\n  facet_wrap(~ Subject) +\n  labs(y = \"Plasma levels (mcg/ml)\", x = \"Time (hours)\") +\n  geom_point(aes(col = Subject), cex = 3) +\n  geom_line(aes(y = Estimate, col = Subject), linewidth = 1) +\n  geom_ribbon(aes(ymin = Q2.5, ymax = Q97.5, fill = Subject), alpha = .3)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.svg)\n:::\n:::\n\n\n\nThe Bayesian model's fitted effects align nicely with the observed data, and the uncertainty around the expected plasma concentrations is well-represented. To explore the range of parameters compatible with our data, we can **plot the posterior distributions**:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(nlme_brms, variable = \"^b_\", regex = TRUE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.svg)\n:::\n:::\n\n\n\nThese plots reveal a spectrum of parameter values that fit the observed data. For the decay parameter $\\lambda$, we can expect a 78% ($1 - \\exp(-1.5)$) to 83% ($1 - \\exp(-1.8)$) decrease in indomethacin plasma concentrations per hour.\n\nWe can further explore the posterior distributions. For example, transforming the $\\lambda$ parameter into a percentage decay scale:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nposterior_dist <- as_draws_df(nlme_brms, variable = \"b_lambda_Intercept\")\nposterior_dist$prob_decay <- (1 - exp(posterior_dist$b_lambda_Intercept))\n\nggplot(posterior_dist, aes(x = prob_decay)) +\n  tidybayes::stat_halfeye(fill = \"lightblue\") +\n  labs(y = \"Density\", x = \"Decay of plasma levels per hour (%)\") +\n  scale_x_continuous(labels = scales::label_percent(), n.breaks = 8)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.svg)\n:::\n:::\n\n\n\nThis flexibility in the Bayesian framework allows us to interpret the decay rate in more intuitive terms, reflecting a range of plausible rates consistent with our data. We can now communicate the percent decay of indomethacin plasma levels in a more accessible manner, considering the variability captured by our model.\n\n## Comparing models\n\nNow that we’ve implemented linear, non-linear, and Bayesian non-linear models, it’s time to compare their performances. It’s important to remember that each model has its own set of performance metrics, which can make direct comparisons tricky. However, by calculating the root mean square error (RMSE), we can get a sense of the **average error each model makes when predicting plasma levels**. RMSE gives us a tangible measure of error on the same scale as our predictor, helping us gauge how well each model is performing:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.frame(\n  lm = performance::performance_rmse(lm_freq),\n  nlme = performance::performance_rmse(nlm_freq),\n  brms = performance::performance_rmse(nlme_brms)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         lm      nlme      brms\n1 0.4417804 0.1080546 0.1077238\n```\n\n\n:::\n:::\n\n\n\nHere, we can see that **both the frequentist and Bayesian non-linear models outperformed the simple linear model** by a significant margin. The lower RMSE values indicate a better overall fit. Interestingly, the Bayesian model edged out the frequentist model by a tiny margin, with a difference of just 0.000402 mcg/ml in RMSE ($\\text{RMSE}(M_{nlme}) - \\text{RMSE}(M_{brms})$). Given that the standard deviation of the plasma levels is 0.63 mcg/ml, this difference is practically negligible and unlikely to be meaningful in a real-world context.\n\n# Final Remarks\n\nAfter fitting three different models (two of which were non-linear) it becomes apparent that model selection isn't just a mechanical task; **it's a deliberate and thoughtful process that requires us to deeply consider the scientific meaning behind the equations we use**. This is where the art of modeling comes into play. Simply plugging numbers into an algorithm can give you results, but those results are only as meaningful as the assumptions underpinning them.\n\nWhen we lay down equations, we're not just scribbling mathematical symbols; we're making statements about how we believe the world works. In the case of indomethacin, **our model reflects the assumption that its plasma levels decay exponentially over time**, a reasonable assumption based on pharmacokinetic principles. But it's also crucial to remember that every equation carries with it a set of assumptions, some explicit and others hidden beneath layers of mathematical complexity. Recognizing and challenging these assumptions is where the real insight lies.\n\nHistorically, the evolution of statistical modeling has been shaped by this very tension between complexity and clarity. Think back to the early days of regression analysis in the 19th century when pioneers like [Francis Galton and Karl Pearson](https://doi.org/10.1080/10691898.2001.11910537) were laying the groundwork for modern statistics. They weren't just crunching numbers, they were developing tools to describe the relationships they observed in the natural world. Their work was as much about understanding the data as it was about interpreting the equations they devised.\n\nFast forward to today, and the principles remain the same, even as our tools have become more sophisticated. The move from linear to non-linear models mirrors our growing understanding of the world's complexities. We know now that relationships aren't always straight lines; they can bend, twist, and curve in ways that linear models can't capture. Yet, **with this power comes responsibility**. Non-linear models, while more flexible, **also require us to be more vigilant about the assumptions we're making**.\n\nAs we've seen with our indomethacin example, the choice of model has a profound impact on the conclusions we draw. The frequentist and Bayesian approaches each bring their own perspectives, but **neither is inherently superior**. Instead, the best approach depends on the context of the problem and the nature of the data. In the end, the goal isn't to find the \"right\" model but **to find a model that best captures the underlying reality we're trying to understand**.\n\nSo, as we continue to develop and apply statistical models, let's do so with a sense of curiosity and caution. Let's appreciate the historical context that brought us here, and let's always be aware of the assumptions we're making, because in the world of statistics, those assumptions shape the stories we tell.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}